[{"E:\\Code\\PDF-SDK-Evaluation-2021\\react-pdf-sample\\my-pdf-app\\src\\index.js":"1","E:\\Code\\PDF-SDK-Evaluation-2021\\react-pdf-sample\\my-pdf-app\\src\\App.js":"2","E:\\Code\\PDF-SDK-Evaluation-2021\\react-pdf-sample\\my-pdf-app\\src\\Twitter.js":"3","E:\\Code\\PDF-SDK-Evaluation-2021\\react-pdf-sample\\my-pdf-app\\src\\Sample.js":"4"},{"size":283,"mtime":1621217710154,"results":"5","hashOfConfig":"6"},{"size":4956,"mtime":1621263045798,"results":"7","hashOfConfig":"6"},{"size":408,"mtime":1620900951675,"results":"8","hashOfConfig":"6"},{"size":2621,"mtime":1621217435121,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},"s7yj5s",{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"13"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"E:\\Code\\PDF-SDK-Evaluation-2021\\react-pdf-sample\\my-pdf-app\\src\\index.js",["23","24"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Twitter from './Twitter';\nimport Render from './Sample';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n",["25","26"],"E:\\Code\\PDF-SDK-Evaluation-2021\\react-pdf-sample\\my-pdf-app\\src\\App.js",["27"],"import React, { useEffect, useState, useMemo } from 'react';\nimport { pdfjs, Document, Page } from 'react-pdf';\nimport axios from 'axios'\nimport './App.css';\n\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\n\nfunction Test() {\n  const [data, setData] = useState(null)\n  const [dataId, setDataId] = useState(0)\n  const [start, setStart] = useState(0)\n  const [end, setEnd] = useState(null)\n  const [canNext, setCanNext] = useState(null)\n  const [currentPage, setCurrentPage] = useState(1)\n\n\n  const getPDF = async (dataId, startPage) => {\n    console.log(`http://localhost:2999/api/readManga/${dataId}/${startPage}`)\n    return axios.get(`http://localhost:2999/api/readManga/${dataId}/${startPage}`)\n      .then(res => res.data)\n      .then(({ data }) => data)\n  }\n  useEffect(() => {\n    getPDF(dataId, start).then(({ buffer, start, end, canNext }) => {\n      console.log(start, end, canNext)\n      setData(Uint8Array.from(buffer.data))\n      setStart(start)\n      setEnd(end)\n      setCanNext(canNext)\n    })\n  }, [dataId, start])\n  const nextChap = () => {\n    setDataId((dataId + 1 + 4) % 4)\n    setCurrentPage(1)\n  }\n  const preChap = () => {\n    setDataId((dataId - 1 + 4) % 4)\n    setCurrentPage(1)\n\n  }\n  const readNext = () => {\n    if (canNext) {\n      setStart(end)\n      setCurrentPage(1)\n    }\n  }\n  const readBack = () => {\n    setCurrentPage(start)\n    if (start - 15 < 0) setStart(0)\n    else setStart(start - 15)\n\n  }\n  return (\n    <Render data={data} preChap={preChap} nextChap={nextChap} readNext={readNext} readBack={readBack} currentPage={currentPage} />\n  )\n}\n\nfunction Render({ data, preChap, nextChap, readNext, readBack, currentPage }) {\n  const [numPages, setNumPages] = useState(null);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [renderedPageNumber, setRenderedPageNumber] = useState(null);\n  const [isShow, setIsShow] = useState(false)\n  const [transitionClass, setTransitionClass] = useState()\n  const file = useMemo(() => {\n    setPageNumber(1)\n    setRenderedPageNumber(null)\n    setIsShow(false)\n    return { data }\n  }, [data])\n\n  function onDocumentLoadSuccess({ numPages }) {\n    console.log(11)\n    setNumPages(numPages);\n    setPageNumber(currentPage)\n  }\n  function changePage(offset) {\n    setPageNumber((prevPageNumber) => prevPageNumber + offset);\n  }\n\n  function previousPage() {\n    changePage(-1);\n  }\n\n  function nextPage() {\n    changePage(1);\n  }\n  const handleOnClick = (event) => {\n    setTransitionClass(\"\")\n    const { pageX, target } = event\n    const { offsetLeft, offsetWidth } = target\n    if (target.nodeName !== \"CANVAS\") {\n      console.log(\"Out\")\n      return\n    }\n    const d = Math.floor(offsetWidth / 3)\n    const relativeX = pageX - offsetLeft\n    if (relativeX > 0 && relativeX < d) {\n      console.log(\"LEFT\")\n      if (pageNumber === 1) readBack()\n      if (pageNumber > 1) previousPage()\n      else console.log(\"At 1\")\n    }\n    if (relativeX > d * 2 && relativeX < d * 3) {\n      console.log(\"RIGHT\")\n      if (pageNumber === numPages) readNext()\n      if (pageNumber < numPages) nextPage()\n      else console.log(`At ${numPages}`)\n    }\n    if (relativeX > d * 1 && relativeX < d * 2) {\n      console.log(\"Mid\")\n      setIsShow(true)\n      setTimeout(() => setIsShow(false), 2000)\n    }\n\n  }\n\n  const callTransitionClass = () => {\n    console.log(renderedPageNumber, pageNumber)\n    if (renderedPageNumber < pageNumber) {\n      setTransitionClass('animation-too-left')\n      return\n    }\n    setTransitionClass('animation-too-right')\n    return\n  }\n  const isLoading = renderedPageNumber !== pageNumber;\n\n  return (\n    <React.Fragment>\n      {isShow && <div className=\"overlay\">\n        <p>\n          Page {pageNumber || (numPages ? 1 : '--')} of {numPages || '--'}\n        </p>\n        <button type=\"button\" onClick={preChap}>\n          Pre\n        </button>\n        <button type=\"button\" onClick={nextChap}>\n          Next\n        </button>\n      </div>}\n      <Document file={file} onLoadSuccess={onDocumentLoadSuccess} >\n        {(\n          <div\n            style={{ position: 'absolute', width: '100%', textAlign: '-webkit-center' }}\n          >\n            <Page\n              key={renderedPageNumber}\n              className={`prevPage ${transitionClass}`}\n              pageNumber={renderedPageNumber}\n\n              width=\"400\"\n              onClick={handleOnClick}\n            />\n          </div>\n        )}\n        <div\n          style={{ position: 'absolute', width: '100%', textAlign: '-webkit-center' }}\n        >\n          <Page\n            key={pageNumber}\n            pageNumber={pageNumber}\n            onRenderSuccess={() => {\n              callTransitionClass()\n              setRenderedPageNumber(pageNumber)\n            }}\n            width=\"400\"\n            onClick={handleOnClick}\n          />\n        </div>\n\n\n      </Document>\n\n    </React.Fragment>\n  );\n}\n\nexport default Test;\n","E:\\Code\\PDF-SDK-Evaluation-2021\\react-pdf-sample\\my-pdf-app\\src\\Twitter.js",["28","29"],"import './Twitter.css';\r\nimport { useState } from 'react';\r\nimport { ElfsightEmbedSDK } from '@elfsight/embed-sdk';\r\nfunction Twitter() {\r\n    // const Embedded = ElfsightEmbedSDK.displayWidget(ReactDOM.querySelector('#widget-container'), widget.id)\r\n    return (\r\n        <>\r\n            <div id=\"widget-container\"></div>\r\n            {/* <Embedded/> */}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Twitter;\r\n",["30","31"],"E:\\Code\\PDF-SDK-Evaluation-2021\\react-pdf-sample\\my-pdf-app\\src\\Sample.js",[],{"ruleId":"32","severity":1,"message":"33","line":5,"column":8,"nodeType":"34","messageId":"35","endLine":5,"endColumn":15},{"ruleId":"32","severity":1,"message":"36","line":6,"column":8,"nodeType":"34","messageId":"35","endLine":6,"endColumn":14},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"32","severity":1,"message":"41","line":126,"column":9,"nodeType":"34","messageId":"35","endLine":126,"endColumn":18},{"ruleId":"32","severity":1,"message":"42","line":2,"column":10,"nodeType":"34","messageId":"35","endLine":2,"endColumn":18},{"ruleId":"32","severity":1,"message":"43","line":3,"column":10,"nodeType":"34","messageId":"35","endLine":3,"endColumn":26},{"ruleId":"37","replacedBy":"44"},{"ruleId":"39","replacedBy":"45"},"no-unused-vars","'Twitter' is defined but never used.","Identifier","unusedVar","'Render' is defined but never used.","no-native-reassign",["46"],"no-negated-in-lhs",["47"],"'isLoading' is assigned a value but never used.","'useState' is defined but never used.","'ElfsightEmbedSDK' is defined but never used.",["46"],["47"],"no-global-assign","no-unsafe-negation"]